#==============================================#
# Directories and file names
#==============================================#

	DIR_SCRIPTS					:= ./scripts
	DIR_OUT						:= ./out
	DIR_SRC						:= ./src
	DIR_TOOLS					:= ./tools
	DIR_BUILD					:= ./build
	DIR_CONFIG					:= ./config

	DIR_COMPILER				:= $(DIR_TOOLS)/GCC/bin/bin
	DIR_LINKER					:= $(DIR_TOOLS)/binutils/bin/bin
	DIR_GNU_AS					:= /mnt/d/programming/os/tools/binutils/bin/bin

	DIR_KERNEL					:= $(DIR_SRC)/kernel
	DIR_PLATFORM				:= $(DIR_SRC)/platform
	DIR_SYSTEMV					:= $(DIR_PLATFORM)/system-v
	DIR_LIB_SRC					:= $(DIR_SRC)/lib
	DIR_KERNEL_HEADER			:= $(DIR_KERNEL)/include
	DIR_BOOTLOADER				:= $(DIR_TOOLS)/grub/stage2_eltorito


#==============================================#
# 
#==============================================#

	


#==============================================#
# Programs and their flags
#==============================================#

	GNU_AS					:= i686-elf-
	ASSEMBLER 				:= nasm
	ASSEMBLER_FLAGS 		:= -Wall -f elf64

	C_COMPILER 				:= gcc
	C_COMPILER_FLAGS 		:= -I $(DIR_SRC) -c -ffreestanding -Wall -Wextra -fno-exceptions -fno-rtti 
	C_COMPILER_FLAGS_DBG 	:= -I $(DIR_SRC) -g -c -ffreestanding -Wall -Wextra -fno-exceptions -fno-rtti 
	C_COMPILER_FLAGS_LIB	:= -I $(DIR_LIB_SRC) -c -ffreestanding -Wall -Wextra -fno-exceptions -fno-rtti

	LINKER 					:= ld
	LINKER_FLAGS 			:= -T $(DIR_SCRIPTS)/linker/kernel.ld -m elf_x86_64

	
#==============================================#
# Output directories (when building)
#==============================================#

	DIR_BUILD_KERNEL_ELF 	:= $(DIR_BUILD)/bin
	DIR_BUILD_KERNEL_OBJ 	:= $(DIR_BUILD)/obj/kernel
	DIR_BUILD_CRT_OBJ 		:= $(DIR_BUILD)/obj/platform/system-v
	KERNEL_ELF_NAME			:= kernel

#==============================================#
# Other variables
#==============================================#

	KERNEL_SOURCES		 	:= $(shell find "$(DIR_KERNEL)" -type f -name "*.asm")
	KERNEL_CPP_SOURCES		:= $(shell find "$(DIR_KERNEL)" -type f -name "*.cpp")
	KERNEL_HPP_SOURCES		:= $(shell find "$(DIR_KERNEL)" -type f -name "*.hpp")
	CRT_SOURCES				:= $(shell find "$(DIR_SYSTEMV)" -type f -name "*.asm")

	CRTBEGIN_OBJ			:=$(shell $(C_COMPILER) $(C_COMPILER_FLAGS) -print-file-name=crtbegin.o)
	CRTEND_OBJ				:=$(shell $(C_COMPILER) $(C_COMPILER_FLAGS) -print-file-name=crtend.o)

	DEBUG					:= true

	OS_NAME					:= LucyOS

#==============================================#
# Internal stuff
#==============================================#
#$(KERNEL_CPP_SOURCES)
	MAX_CPP_SRC_LEN			:= $(shell 														\
									MAX_LENGTH=0;											\
									for x in hello $(KERNEL_CPP_SOURCES);					\
									do														\
										if [ $${#x} -gt $$MAX_LENGTH ]; then				\
											MAX_LENGTH=$${#x};								\
										fi;													\
									done;													\
									echo $$MAX_LENGTH;										\
																							\
								)

	MAX_ASM_SRC_LEN			:= $(shell 														\
									MAX_LENGTH=0;											\
									for x in hello $(KERNEL_SOURCES);						\
									do														\
										if [ $${#x} -gt $$MAX_LENGTH ]; then				\
											MAX_LENGTH=$${#x};								\
										fi;													\
									done;													\
									echo $$MAX_LENGTH;										\
																							\
								)


	MAX_SRC_LEN							:= $$(( $(MAX_CPP_SRC_LEN) > $(MAX_ASM_SRC_LEN) ? $(MAX_CPP_SRC_LEN) : $(MAX_ASM_SRC_LEN) ))
	SPACING 							:= 14
	SPACING_RIGHT						:= 8
	TOTAL_LENGTH						:= $$(($(MAX_SRC_LEN)+$(SPACING)))

	


BINFILES := $(subst $(SRCDIR),$(OUTDIR),$(ASMFILES:asm=bin))
ENTRY := $(SRCDIR)/boot/include/print.asm
ENTRY_BIN := $(ENTRY:asm=bin)
ASMFILENAMES := $(foreach dir,$(ASMFILES),"$(shell basename -- $(dir))")
OBJFILENAMES := $(foreach dir,$(ASMFILES),"$(shell basename -s .asm $(dir)).o")



BUILD_LIST := assemble

all: kernel

kernel: 			clean kernel_assemble kernel_link kernel_iso

kernel_assemble:    clean

# Make required directories

	@echo "\n"
	@echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	@echo "   Create and verify directory tree"
	@echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	

	@echo "|   Creating directory $(DIR_BUILD)"
	@echo -n "|      > "
	mkdir -p $(DIR_BUILD)	
	
	@echo "|   Creating directory $(DIR_BUILD_KERNEL_OBJ)"
	@echo -n "|      > "
	mkdir -p $(DIR_BUILD_KERNEL_OBJ)

	@echo "|   Creating directory $(DIR_BUILD_CRT_OBJ)"
	@echo -n "|      > "
	mkdir -p $(DIR_BUILD_CRT_OBJ)


	@echo "|   Creating directory $(DIR_PLATFORM)/system-v"
	@echo -n "|      > "
	mkdir -p $(DIR_PLATFORM)/system-v

	@echo "|"

# Generate an appropriate (and temporary) filename for all the objects generated by this step, to be used by the linker scripts,
# but which are still human readable and understandable, with no chance of name collisiions.
# To make life simpler, nasm is called in the same command, with a \ to make it more readable.

	@echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	@echo "   Assemble freestanding .asm files"
	@echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	
#	$(foreach source, $(KERNEL_SOURCES), 									 								\
#		$(ASSEMBLER) $(ASSEMBLER_FLAGS) $(source)															\
#		-o $(DIR_BUILD_KERNEL_OBJ)/$(shell basename -s .asm $(subst /,_, $(subst ./,, $(source)))).o;		\
#																											\
#	)

# Exception for platform dependent sources (mainly just the system-v ABI files, crtn, crti, etc)
	@$(foreach source, $(CRT_SOURCES), 									 								\
		$(ASSEMBLER) $(ASSEMBLER_FLAGS) $(source)															\
		-o $(DIR_BUILD_CRT_OBJ)/$(shell basename -s .asm $(source)).o;		\
		STRING="|   Compiling ";             \
			STRING="$${STRING}\"";					           																						\
																																\
			STRING="$${STRING}$(source)";																												\
			STRING="$${STRING}\""																													\
			space=" "; \
			src="$(source)"; \
			echo -n "$${STRING}"; \
			for x in $$(seq 1 $$(($(TOTAL_LENGTH)-$${#src})));																			\
			do																																	\
				echo -n " ";																												\
			done;	\
			echo -n "->"; \
			for x in $$(seq 1 $(SPACING_RIGHT));																			\
			do																																	\
				echo -n " ";																												\
			done; \
			STRING="$(DIR_BUILD_KERNEL_OBJ)/$(shell basename -s .asm $(subst /,_, $(subst ./,, $(source)))).o";								\
			echo "$${STRING}"; 						\
			echo "|      > $(ASSEMBLER) $(ASSEMBLER_FLAGS) $(source) -o $(DIR_BUILD_CRT_OBJ)/$(shell basename -s .asm $(source)).o"; \
	)

	@$(foreach source, $(KERNEL_SOURCES), 									 								\
		$(ASSEMBLER) $(ASSEMBLER_FLAGS) $(source)															\
		-o $(DIR_BUILD_KERNEL_OBJ)/$(shell basename -s .asm $(subst /,_, $(subst ./,, $(source)))).o;		\
		STRING="|   Compiling ";             \
			STRING="$${STRING}\"";					           																						\
																																\
			STRING="$${STRING}$(source)";																												\
			STRING="$${STRING}\""																													\
			space=" "; \
			src="$(source)"; \
			echo -n "$${STRING}"; \
			for x in $$(seq 1 $$(($(TOTAL_LENGTH)-$${#src})));																			\
			do																																	\
				echo -n " ";																												\
			done;	\
			echo -n "->"; \
			for x in $$(seq 1 $(SPACING_RIGHT));																			\
			do																																	\
				echo -n " ";																												\
			done; \
			STRING="$(DIR_BUILD_KERNEL_OBJ)/$(shell basename -s .asm $(subst /,_, $(subst ./,, $(source)))).o";								\
			echo "$${STRING}"; 						\
			echo "|      > $(ASSEMBLER) $(ASSEMBLER_FLAGS) $(source) -o $(DIR_BUILD_KERNEL_OBJ)/$(shell basename -s .asm $(subst /,_, $(subst ./,, $(source)))).o;"; \
	)

	


	@echo "|"

kernel_compile_cpp:
#@printf " $(foreach source, $(KERNEL_CPP_SOURCES),Compiling $(source)%15s->%-3s$(DIR_BUILD_KERNEL_OBJ)/$(shell basename -s .asm $(subst /,_, $(subst ./,, $(source)))).o\n)"
	@echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	@echo "   Compile CPP files"
	@echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	

	@$(foreach source, $(KERNEL_CPP_SOURCES),																										\
			STRING="|   Compiling ";             \
			STRING="$${STRING}\"";					           																						\
																																\
			STRING="$${STRING}$(source)";																												\
			STRING="$${STRING}\""																													\
			space=" "; \
			src="$(source)"; \
			echo -n "$${STRING}"; \
			for x in $$(seq 1 $$(($(TOTAL_LENGTH)-$${#src})));																			\
			do																																	\
				echo -n " ";																												\
			done;	\
			echo -n "->"; \
			for x in $$(seq 1 $(SPACING_RIGHT));																			\
			do																																	\
				echo -n " ";																												\
			done; \
			STRING="$(DIR_BUILD_KERNEL_OBJ)/$(shell basename -s .asm $(subst /,_, $(subst ./,, $(source)))).o";								\
			echo "$${STRING}"; \
	)
	@$(foreach source, $(KERNEL_HPP_SOURCES),																										\
			STRING="|   Compiling ";             \
			STRING="$${STRING}\"";					           																						\
																																\
			STRING="$${STRING}$(source)";																												\
			STRING="$${STRING}\""																													\
			space=" "; \
			src="$(source)"; \
			echo -n "$${STRING}"; \
			for x in $$(seq 1 $$(($(TOTAL_LENGTH)-$${#src})));																			\
			do																																	\
				echo -n " ";																												\
			done;	\
			echo -n "->"; \
			for x in $$(seq 1 $(SPACING_RIGHT));																			\
			do																																	\
				echo -n " ";																												\
			done; \
			STRING="$(DIR_BUILD_KERNEL_OBJ)/$(shell basename -s .asm $(subst /,_, $(subst ./,, $(source)))).o";								\
			echo "$${STRING}"; \
	)


#(DIR_BUILD_KERNEL_OBJ)/$(shell basename -s .asm $(subst /,_, $(subst ./,, $(source)))).o\n

ifeq (${DEBUG},false)
		$(foreach source, $(KERNEL_CPP_SOURCES), 									 						\
		$(C_COMPILER) $(C_COMPILER_FLAGS) $(source)											\
		-o $(DIR_BUILD_KERNEL_OBJ)/$(shell basename -s .asm $(subst /,_, $(subst ./,, $(source)))).o;		\
																											\
		)
else
		$(foreach source, $(KERNEL_CPP_SOURCES), 									 						\
		$(C_COMPILER) $(C_COMPILER_FLAGS_DBG) $(source)											\
		-o $(DIR_BUILD_KERNEL_OBJ)/$(shell basename -s .asm $(subst /,_, $(subst ./,, $(source)))).o;		\
																											\
		)
endif

	@printf " $(foreach source, $(KERNEL_HPP_SOURCES),Compiling $(source)%15s->%-3s$(DIR_BUILD_KERNEL_OBJ)/$(shell basename -s .asm $(subst /,_, $(subst ./,, $(source)))).o\n)"

#$(foreach source, $(KERNEL_HPP_SOURCES), 									 							\
#	$(DIR_COMPILER)/$(C_COMPILER) $(C_COMPILER_FLAGS) $(source)											\
#	-o $(DIR_BUILD_KERNEL_OBJ)/$(shell basename -s .asm $(subst /,_, $(subst ./,, $(source)))).o;		\
#																										\
#)
kernel_link: 		clean kernel_assemble kernel_compile_cpp
#ld -T link.ld -melf_i386 loader.o -o kernel.elf
	@mkdir -p $(DIR_BUILD_KERNEL_ELF)
	$(eval KERNEL_OBJ_FILES=$(shell find "$(DIR_BUILD_KERNEL_OBJ)" -type f -name "*.o"))
	$(eval CRTI_OBJ=$(shell find $(DIR_BUILD_CRT_OBJ) -type f -name "crti.o"))
	$(eval CRTN_OBJ=$(shell find $(DIR_BUILD_CRT_OBJ) -type f -name "crtn.o"))
	echo $(KERNEL_OBJ_FILES)

	$(LINKER) $(LINKER_FLAGS) $(KERNEL_OBJ_FILES) -o $(DIR_BUILD_KERNEL_ELF)/$(KERNEL_ELF_NAME)

kernel_iso: 		kernel_assemble kernel_link
	


clean:
	rm -f -r ./build/
	rm -f -r ./logs/
	mkdir -p ./build
	mkdir -p ./logs

disassemble:
	mkdir -p ./out/assembly
	g++ -S -fverbose-asm -ffreestanding -Wall -Wextra -fno-exceptions -fno-rtti -B /mnt/d/programming/os/tools/binutils/bin/bin/i686-elf- ./src/kernel/boot/main.cpp -o ./out/assembly/disassembled.s

run:
	qemu-system-x86_64 -boot d -cdrom $(DIR_OUT)/iso/$(OS_NAME).iso

debug:
	mkdir -p ./logs
	qemu-system-x86_64 -monitor stdio -s -S -D ./logs/qemu-kernel.log -boot d -cdrom $(DIR_OUT)/iso/$(OS_NAME).iso


binutils:
	